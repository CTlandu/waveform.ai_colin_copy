openapi: 3.0.0
info:
  title: Waveform.ai User Management API
  description: API endpoints for user registration, authentication, and management
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /users/register:
    post:
      summary: Register a new user
      description: Create a new user account and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token that expires in 1 hour
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

  /users/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT token that expires in 1 hour
        '404':
          description: User does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User does not exist"
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

  /users/{id}/update:
    patch:
      summary: Update user information
      description: Update user profile information (excluding role, permissions, status, and password)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
              example:
                username: "newUsername"
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No fields provided for update."
        '403':
          description: Forbidden update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Field role cannot be updated"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

  /users/{id}/update_password:
    patch:
      summary: Update user password
      description: Update user password with verification of old password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

  /users/{id}/admin_update:
    patch:
      summary: Update user role and permissions (Admin only)
      description: Update user role or permissions (excluding username, email, password)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
                status:
                  type: string
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No fields provided for update."
        '403':
          description: Forbidden update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Field username cannot be updated"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

  /users/{id}/delete:
    delete:
      summary: Delete user
      description: Delete a user account by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User deleted"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User ID required"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server Error"

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User's unique identifier
        username:
          type: string
          description: User's display name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: Hashed password
        role:
          type: string
          description: User's role
        permissions:
          type: array
          items:
            type: string
          description: User's permissions
        status:
          type: string
          description: User's status
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp